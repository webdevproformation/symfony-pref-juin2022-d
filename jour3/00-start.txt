pas d'obligation en terme de design 


créer les bases de données et etablir les relations

vehicule UN véhicule associé à PLUSIEURS COMMANDES

commande 

membre (user) UN membre associé à PLUSIEURS COMMANDES

------------------- 

Front Office 
  - Page d'accueil => recherche => 
  - resultat => cliquer 
  - Page s'incrire / se connecter  => clique 
  - Mon COmpte => Finaliser la commande (confirmation)
      avec véhicule + critère de recherche  + QUI => CREER remplir la table commande 

---------------------

Back Office 
   - Gérer des véhicules => CREER / MODIFIER / SUPPRIMER / VOIR 
   - Gérer les membres (users) => CREER / MODIFIER / SUPPRIMER / VOIR 
   - Gérer les commandes => VOIR / MODIFIER / SUPPRIMER

---------------------

    ROLE_USER  
    ROLE_MEMBRE => (membre uniquement via le front)
    ROLE_ADMIN  => (espace membre + admin)

------------------------

Quelle est la liste des composants qu'il faut installer pour réaliser ce projet ??

=> base de données => orm
=> controller  => annotations
=> html => twig + asset
=> formulaire => form 
=> authentification / autorisation => security + symfonycasts/verify-email-bundle
=> validator

=> aider debug profiler maker 

------------------------

combien de controller ???? 

autant de controller que de pages dans le site ???

regrouper des pages dans un controller FrontController ???

------------------------

Sqlite / MySQL / MariaDB => votre choix 

composer 
https://github.com/webdevproformation/symfony-init-juin22-d (1ère semaine)
rappel en PHP => namespace / use 
composer packagist yaml 
installation des binaires symfony .... // php bin composer 
premier symfony (architecture)
controller 
twig 
annotations 
orm => créer une base 

https://github.com/webdevproformation/-webdevproformation-symfony-inter-juin2022-d (2ème semaine)
formulaire
liaison entre entite / type / form / vue 
entité seul (sans liaison)  CRUD entity Manager / reposiroty 
validation Assert\ dans l'entité 
route partie variable http://localhost:8000/article
route partie variable http://localhost:8000/article/123
relations entre les tables => OneToMany ManyToOne => CRUD
relation entre les tables => OneToOne OneToOne
télécharger des images ( prendre )
ajouter dans une formulaire <input type="file"> => télécharger / déplacer / stocker son url dans la base de données   

https://github.com/webdevproformation/symfony-pref-juin2022-d (cette semaine)
=> authentification / autorisation (package security)
=> relation / utiliser le profil user dans les formulaires ($this->getUser())
=> fixture avec faker 
=> pagination avec knp paginator 
=> recherche ( SELECT personnalisé )

Question : 

=> string 1 non null
=> validation => #[Assert\Choice(["M", "F"])] 
=> formulaire => ChoiceType::class F / M
=> https://www.doctrine-project.org/projects/doctrine-orm/en/2.11/cookbook/mysql-enums.html


symfony new location

cd location 
composer require orm annotations twig asset form security symfonycasts/verify-email-bundle validator
composer require --dev debug profiler maker


=> base de données => orm
=> controller  => annotations
=> html => twig + asset
=> formulaire => form 
=> authentification / autorisation => security + symfonycasts/verify-email-bundle
=> validator

=> aider debug profiler maker 

------------------------

symfony server:start


------------------------

symfony console make:entity Vehicule

- titre (varchar 200) => string 
- marque (varchar 50)
- modele (varchar 50)
- description (text) (possible null)
- photo (varchar 200)
- prix_journalier (int 3) => integer 
- date_enregistrement (datetime) => datetime 

(ajouter un constructeur et attention à la timezone !!)

=> src/Entity/Vehicule.php ( regarder ET ajouter dès maintenant les validations ) 


- pseudo (varchar 20)
- mdp (varchar 60) => (utiliser la norme => password)
- nom (varchar 20)
- prenom (varchar 20)
- email (varchar 50)
- civilite (enum : m,f)
- statut (int 3)  => utiliser la norme => roles
- date_enregistrement (datetime)

symfony console make:user => utilisation facilité 
email (varchar 50)
mdp (varchar 60) => (utiliser la norme => password)
statut (int 3)  => utiliser la norme => roles
=> https://symfony.com/doc/current/security.html


- pseudo (varchar 20)
- nom (varchar 20)
- prenom (varchar 20)
- civilite (enum : m,f) => string 1
- date_enregistrement (datetime)

symfony console make:entity (pour compléter les champs manquants)

modifier manuellement les entités (champs) / supprimer setter et getter 
symfony console make:entity --regenerate (attention uniquement si le fichier User.php n'est pas en cours d'édition / enregistrer ce fichier ET fermé )


=> ajouter les Constraints as Assert

#[ORM\Column(type: 'string', length: 1)]
#[Assert\Choice(callback:"getGenres")]
private $civilite;

public function getGenres() : array{
    return ["m" , "f"];
}

+ constructeur et timezone pour date date_enregistrement

------------------------

commande 

- date_heure_depart (datetime)
- date_heure_fin (datetime)
- prix_total (int 3)
- date_enregistrement (datetime)

symfony console make:entity Commande


---------------- 

relation 

PK => Primary Key (clé primaire)
FK => Foreign Key (clé étrangère / clé secondaire)


véhicule peut être loué plusieurs fois 
user peut réaliser plusieurs location 

=> OneToMany // ManyToOne

=> UN véhicule peut être commandé PLUSIEURS fois OneToMany 
=> ManyToOne (entité commande) => elle qui contient la clé secondaire 


-------------------

# XAMPP (mariadb) windows 
# WAMP (mysql) windows 
# MAMP (mysql) MacOS

DATABASE_URL="mysql://root:@127.0.0.1:3306/location?serverVersion=mariadb-10.4.24&charset=utf8mb4"

symfony console doctrine:database:create


symfony console make:migration 

symfony console doctrine:migrations:migrate 


=> créer la structure de votre base de données 


Back 
=> CRUD créer des véhicules  
=> CRUD des users 


commande front rechercher / s'inscrire => 
=> créer

back
=> CRUD

composer require orm => Doctrine

 => Abstraction de SQL + PDO + table / base / enregistrement

CREATE TABLE 

INSERT INTO 

new PDO("" , "root", "")

symfony console make:migration 
comparaison entre structure des tables ET entité (annotations) => synchro 
DONC il faut que doctrine puisse se connecter pour pouvoir effectuer la comparaison .env 


CRUD vehicule 
CRUD membre

mise en forme 

rdv 13h40 !!!!!




